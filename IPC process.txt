#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

// Define a shared resource and a counter
int shared_resource = 0;
int counter = 0;

// Define mutex, semaphore, and condition variables
pthread_mutex_t mutex;
sem_t semaphore;
pthread_cond_t condition;

// Function to simulate work
void do_work(int id) {
    printf("Thread %d is working.\n", id);
}

// Function for the producer thread
void *producer(void *arg) {
    for (int i = 0; i < 5; i++) {
        pthread_mutex_lock(&mutex);
        shared_resource++; // Increment the shared resource
        counter++;
        do_work(1);
        sem_post(&semaphore); // Signal the consumer
        pthread_mutex_unlock(&mutex);
        sleep(1);
    }
    return NULL;
}

// Function for the consumer thread
void *consumer(void *arg) {
    for (int i = 0; i < 5; i++) {
        sem_wait(&semaphore); // Wait for the producer
        pthread_mutex_lock(&mutex);
        shared_resource--; // Decrement the shared resource
        counter--;
        do_work(2);
        if (counter == 0) {
            pthread_cond_signal(&condition); // Signal the main thread
        }
        pthread_mutex_unlock(&mutex);
        sleep(1);
    }
    return NULL;
}

int main() {
    pthread_t producer_thread, consumer_thread;
    
    // Initialize synchronization primitives
    pthread_mutex_init(&mutex, NULL);
    sem_init(&semaphore, 0, 0);
    pthread_cond_init(&condition, NULL);

    // Create producer and consumer threads
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    // Wait for the consumer to finish
    pthread_mutex_lock(&mutex);
    while (counter > 0) {
        pthread_cond_wait(&condition, &mutex);
    }
    pthread_mutex_unlock(&mutex);

    // Clean up synchronization primitives
    pthread_mutex_destroy(&mutex);
    sem_destroy(&semaphore);
    pthread_cond_destroy(&condition);

    return 0;
}
